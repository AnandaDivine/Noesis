-- Importer for Crytek .cgf, .cga, .caf and .cal files-- Copyright 2006 Takaro Pty. Ltd.-- www.takaro.net-- Version 1.2.1 (2007-05-28)/* Notes:*/utility takaroCryImporter "CryImporter"(	---- Variables and Includes----	include "CryImporter-header.ms"	include "CryImporter-utils.ms"		include "CryImporter-chunkreader.ms"	include "CryImporter-scenebuilder.ms"		local doLog = false  -- enable logging window	local logLevel = 1  -- 1 = Highest importance	local logger = LoggingUtil()		local bSeeThrough = true	local bApplyMorph = true	local bSafeApply = true	local bAppendAnim = true	local assetBasePath = "" 	local assetAltBasePath = ""	local iniFileName = "$scripts\\CryImporter\\CryImporter.ini"		local chunkArchive = CryChunkArchive()	local builder = SceneBuilder log:logger.log assetBasePath:assetBasePath assetAltBasePath:assetAltBasePath			---- Forward Function Declarations ----		local modelImport, morphImport, animImport, calImport, getCAFFilename, canImportAnim, reset			---- User Interface ----		group "Model Import"	(		checkbox chkSeeThrough "See-Through Mesh" checked:true		checkbox chkApplyMorph "Apply Face Expressions" checked:true		button btnCgfImport "Import CGF/CGA"		checkbox chkSafeApply "Safe Apply Expressions\n(better for modified mesh\nbut much slower)" \			checked:false offset:[0,15] height:40		button btnMorphImport "Import/Apply Expressions"	)		group "Animation Import"	(		checkbox chkAppendAnim "Append to current range" checked:true		button btnCafImport "Import CAF (single anim)"		button btnCalImport "Import CAL (multi anim)"	)		group "Misc Configuration"	(		button btnBasePath "Set Base Asset Path"		edittext txtBasePath readOnly:true		button btnAltBasePath "Set Alternate Asset Path"		edittext txtAltBasePath readOnly:true	)		button btnAbout "About CryImporter"			---- Event Handlers ----		on takaroCryImporter open do	(		-- Get parameters from INI file if possible		if doesFileExist iniFileName then		(			doLog = getSetting iniFileName "general" "logging" type:"boolean" default:doLog			logLevel = getSetting iniFileName "general" "logLevel" type:"integer" default:logLevel			assetBasePath = getSetting iniFileName "paths" "assetBasePath" default:builder.assetBasePath			assetAltBasePath = getSetting iniFileName "paths" "assetAltBasePath" default:builder.assetAltBasePath			bSeeThrough = getSetting iniFileName "import" "seeThrough" type:"boolean" default:bSeeThrough			bApplyMorph = getSetting iniFileName "import" "applyMorph" type:"boolean" default:bApplyMorph			bSafeApply = getSetting iniFileName "import" "safeApply" type:"boolean" default:bSafeApply			bAppendAnim = getSetting iniFileName "import" "appendAnim" type:"boolean" default:bAppendAnim		)				builder.setAssetBasePath assetBasePath		builder.setAssetAltBasePath assetAltBasePath		-- Init logging floater		logger.init doLog logLevel "takaroCryImporter.logger"				txtBasePath.text = builder.assetBasePath		txtAltBasePath.text = builder.assetAltBasePath		chkSeeThrough.checked = bSeeThrough		chkApplyMorph.checked = bApplyMorph			chkSafeApply.checked = bSafeApply			chkAppendAnim.checked = bAppendAnim		)			on takaroCryImporter close do	(		-- Close logging floater		logger.close()		)		on chkSeeThrough changed state do		bSeeThrough = chkSeeThrough.checked		on chkApplyMorph changed state do		bApplyMorph = chkApplyMorph.checked		on btnCgfImport pressed do	(		modelImport()	)		on chkSafeApply changed state do		bSafeApply = chkSafeApply.checked		on btnMorphImport pressed do	(		morphImport()	)		on chkAppendAnim changed state do		bAppendAnim = chkAppendAnim.checked		on btnCafImport pressed do	(		animImport()	)		on btnCalImport pressed do	(		calImport()	)		on btnBasePath pressed do	(		local tempBasePath = getsavepath caption:"Set default asset directory"		if tempBasePath != undefined then		(			builder.setAssetBasePath tempBasePath			txtBasePath.text = tempBasePath		)	)		on btnAltBasePath pressed do	(		local tempBasePath = getsavepath caption:"Set custom asset directory"		if tempBasePath != undefined then		(			builder.setAssetAltBasePath tempBasePath			txtAltBasePath.text = tempBasePath		)	)		on txtBasePath entered basePathText do	(		builder.setAssetBasePath tempBasePath	)		on txtAltBasePath entered basePathText do	(		builder.setAssetAltBasePath tempBasePath	)			on btnAbout pressed do	(		messagebox "CryImporter V1.2.1 \n\n(c) Copyright 2006 Takaro Pty. Ltd. \n\nwww.takaro.net" \							 title:"About CryImporter" beep:false		)			---- Functions ----			fn modelImport =	(		reset()						local modelFilename = getOpenFileName caption:"Open a CGF or CGA geometry file:" \			types:"cgf (*.cgf)|*.cgf|cga (*.cga)|*.cga|All (*.*)|*.*|"		if modelFilename == undefined then return undefined				local reader = ChunkReader chunkArchive:chunkArchive log:logger.log		local ret = reader.readFile modelFilename fileType_Geom		if (ret != ok) then		(			messagebox ret			return undefined		)				if doLog then reader.printChunks()		logger.flush()						-- convert chunks to max scene		builder.newScene()		builder.addGeom chunkArchive bSeeThrough:bSeeThrough bApplyMorph:bApplyMorph				logger.flush()		gc()	)			fn morphImport =	(		if chunkArchive.meshMorphTargetChunks.count == 0 then		(			messagebox ("No facial expressions currently loaded.\n" + \			            "In the next window, select the CGF file\n" + \			            "that the head on your mesh came from.")								local modelFilename = getOpenFileName caption:"Open a CGF or CGA geometry file:" \				types:"cgf (*.cgf)|*.cgf|cga (*.cga)|*.cga|All (*.*)|*.*|"			if modelFilename == undefined then return undefined						reset() -- clear out the chunk archive at this point so we don't mix data from multiple files						local reader = ChunkReader chunkArchive:chunkArchive log:logger.log			local ret = reader.readFile modelFilename fileType_Geom			if (ret != ok) then			(				messagebox ret				return undefined			)		)				if doLog then reader.printChunks()		logger.flush()						-- try to apply morph chunks to current scene		builder.addMorpher chunkArchive safeApply:bSafeApply				logger.flush()		gc()	)		fn animImport =	(		-- Check that we have a boned model imported and not deleted		if canImportAnim() == undefined then return undefined				local animFilename = getOpenFileName caption:"Open a CAF animation file:"\			types:"caf (*.caf)|*.caf|All (*.*)|*.*|"					if animFilename == undefined then return undefined				-- use a temporary chunk archive so we don't wreck the main one if the file has problems		local tempChunkArchive = CryChunkArchive()				local reader = ChunkReader chunkArchive:tempChunkArchive log:logger.log				local ret = reader.readFile animFilename fileType_Anim		if (ret != ok) then		(			messagebox ret			return undefined		)				if doLog then reader.printChunks()		logger.flush()				-- add anim chunks to max scene		builder.addAnim tempChunkArchive bAppendAnim:bAppendAnim				-- merge new chunks back into main chunk archive		chunkArchive.merge tempChunkArchive				logger.flush()		gc()	)		fn calImport =	(		-- Check that we have a boned model imported and not deleted		if canImportAnim() == undefined then return undefined				local animFilename = getOpenFileName caption:"Open a CAL animation file:"\			types:"cal (*.cal)|*.cal|All (*.*)|*.*|"					if animFilename == undefined then return undefined				-- Read CAL file and get CAF filenames		local reader = CALReader()		local ret = reader.readCALFile animFilename		if (ret != ok) then		(			messagebox ret			return undefined		)				-- make animations start at frame 0 if append checkbox isn't marked		if bAppendAnim == false then			animationrange = interval -1 0					-- Iterate through anim files and import each one		local list = reader.getFileList() -- Returns array of CAFRecord		for x in list do		(			-- Verify that CAF file exists			local path = getCAFFilename x.path animFilename			if (path == undefined) then			(				messagebox ("Unable to find file [" + path + "] in any of the given paths")				continue			) 						local tempChunkArchive = CryChunkArchive()			local r = ChunkReader chunkArchive:tempChunkArchive log:logger.log					local ret = r.readFile path fileType_Anim			if (ret != ok) then			(				messagebox ret				continue			)					if doLog then reader.printChunks()			logger.flush()					-- add anim chunks to max scene			builder.addAnim tempChunkArchive bAppendAnim:true			x.startFrame = animationrange.start.frame as integer			x.endFrame = animationrange.end.frame as integer						-- Don't merge anim data because it may cause scripter to run out of memory on big CALs			-- merge new chunks back into main chunk archive			--chunkArchive.merge tempChunkArchive					logger.flush()			gc()		)		gc()					-- set animation range to cover full range of animations		animationrange = interval 0 (animationrange.end)				-- List details of animation ranges in MaxScript listener		clearListener()		local s = reader.formatAnimListString list		format "The following anim ranges have been imported:\n%" s		messagebox ("Press F11 to open the MaxScript Listener window for a list of\n" + \			          "animation ranges that were imported")	)		fn getCAFFilename name CALFilename=	(		-- test for file in same directory as CAL file		local localPath = getFilenamePath CALFilename		local fullname = localPath + "\\" + name		if doesFileExist fullname then return fullname				-- test for file in same directory as model		localPath = getFilenamePath chunkArchive.geomFileName		fullname = localPath + "\\" + name		if doesFileExist fullname then return fullname				-- test for file via alternate path first		fullname = assetAltBasePath + "\\" + name		if doesFileExist fullname then return fullname				-- then test for file via primary path		fullname = assetBasePath + "\\" + name		if doesFileExist fullname then return fullname				-- test for file via alternate path in Objects\characters\animations		fullname = assetAltBasePath + "\\Objects\\characters\\animations\\" + name		if doesFileExist fullname then return fullname				-- then test for file via primary path in Objects\characters\animations		fullname = assetBasePath + "\\Objects\\characters\\animations\\" + name		if doesFileExist fullname then return fullname				return undefined	)		fn canImportAnim =	(		-- Make sure a boned mesh has been loaded first		-- We do two checks here because it might be possible for a boned mesh to lack one of these		-- chunks, although I don't know if it will ever actually happen in practice		if chunkArchive.boneMeshChunks.count == 0 and chunkArchive.boneAnimChunks.count == 0 then		(			messagebox ("Import a boned model from a CGF/CGA file first, then import an animation.\n\n" + \				          "Note: You can't load a previously imported model from a .max file and\n" + \				          "add new animations to it.\nThe model must be imported from a CGF/CGA file " + \				          "IN THIS SESSION\nfor animation importing to work.")			return undefined		)				-- Check that the imported model hasn't been deleted from the scene		local bMeshDeleted = false		if chunkArchive.nodeChunks.count > 0 then		(			for x in chunkArchive.nodeChunks while bMeshDeleted == false do			(				local name = getNodeByName x.name				if name == undefined then					bMeshDeleted = true			)		)		else			bMeshDeleted = true				if bMeshDeleted == true then		(			messagebox ("Mesh has been deleted from scene. Please re-import.")			return undefined		)				return true	)		fn reset =	(		chunkArchive = CryChunkArchive()		logger.reset()	)	) -- End utility cryImporter	